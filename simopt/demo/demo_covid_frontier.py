"""
This script is intended to help with debugging a problem.
It imports a problem, initializes a problem object with given factors,
sets up pseudorandom number generators, and runs multiple replications
at a given solution.
"""

from pydoc import classname
import numpy as np
import sys
import os.path as o
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")
sys.path.append(o.abspath(o.join(o.dirname(sys.modules[__name__].__file__), "..")))

# Import random number generator.
from rng.mrg32k3a import MRG32k3a

# Import the Solution class.
from base import Solution

# # Import problem.
# # Replace <filename> with name of .py file containing problem class.
# # Replace <problem_class_name> with name of problem class.
# # Ex: from models.cntnv import CntNVMaxProfit
from models.covid_individual import CovidMinInfect


# Fix factors of problem. Specify a dictionary of factors.
# Look at Problem class definition to get names of factors.
# Ex: for the CntNVMaxProfit class,
#     fixed_factors = {"initial_solution": (2,),
#                      "budget": 500}
fixed_factors = {}  # Resort to all default values.
# c_utility = []
# for j in range(1, 11):
#     c_utility.append(5 + j)

# fixed_factors = {
#     "num_prod": 10,
#     "num_customer": 30,
#     "c_utility": c_utility,
#     "price": 9 * np.ones(10),
#     "cost": 5 * np.ones(10)}
# Initialize an instance of the specified problem class.
# Replace <problem_class_name> with name of problem class.
# Ex: myproblem = CntNVMaxProfit(fixed_factors=fixed_factors)
myproblem = CovidMinInfect(fixed_factors= fixed_factors)

# Initialize a solution x corresponding to the problem.
sol_list = [[(0.0, 0.0, 0.0), (0.5688103787397405, 0.7186000283036396, 0.5858033289776865), (0.2753594071312707, 0.5229420395968353, 0.7822083876699547), (0.6537216133377738, 0.4079744473236346, 0.06275242009491273), (0.6537216133377738, 0.4079744473236346, 0.06275242009491273)], [(0.0, 0.0, 0.0), (0.2504381011452352, 0.27654327906691517, 0.6780200207205872), (0.6809217400457064, 0.3718746663885961, 9.362958825075869e-05), (0.11871554322839553, 0.792545217752784, 0.6342638414182885), (0.11871554322839553, 0.792545217752784, 0.6342638414182885)], [(0.0, 0.0, 0.0), (0.7531003730010423, 0.8786650052672069, 0.31149165536981643), (0.32958256419589127, 0.531614496273877, 0.5864827088053347), (0.39223633813326214, 0.2634226080942672, 0.7410638018374497), (0.39223633813326214, 0.2634226080942672, 0.7410638018374497)], [(0.0, 0.0, 0.0), (0.477796237073284, 0.9202597703351715, 0.6123792408907046), (0.6124004387248521, 0.7510313329320675, 0.03014121583415496), (0.7799600160754481, 0.12966026853987386, 0.46917123570749936), (0.7799600160754481, 0.12966026853987386, 0.46917123570749936)], [(0.0, 0.0, 0.0), (0.9616314501080993, 0.13707848114714122, 0.7006501419784571), (0.40690405798052537, 0.3780643573583538, 0.26905030546767256), (0.543379698652536, 0.10924149205028787, 0.42142652595804947), (0.38117312204186093, 0.14596741119428108, 0.8023781447891738)], [(0.0, 0.0, 0.0), (0.26145998257763603, 0.6910683879959921, 0.34497621533345735), (0.26145998257763603, 0.6910683879959921, 0.34497621533345735)], [(0.0, 0.0, 0.0), (0.7794387804165638, 0.30898741592405893, 0.997133948468571), (0.6000842037185827, 0.7238066400289027, 0.6978964647656458), (0.24379506025215905, 0.18934524557176305, 0.9515302441823974), (0.3139575920773622, 0.14506095093038815, 0.9906895824390076), (0.3139575920773622, 0.14506095093038815, 0.9906895824390076)], [(0.0, 0.0, 0.0), (0.09834222319889406, 0.7551541102752218, 0.19432592099061974), (0.7059385226655782, 0.21213662417708382, 0.24415410118737566), (0.346358924415581, 0.5070506558908467, 0.6008025424012283), (0.346358924415581, 0.5070506558908467, 0.6008025424012283)], [(0.0, 0.0, 0.0), (0.44223628076378874, 0.7671352612236828, 0.0759238835405949), (0.3396788350430312, 0.7268667850150474, 0.22176590844227678), (0.3396788350430312, 0.7268667850150474, 0.22176590844227678)], [(0.0, 0.0, 0.0), (0.30433022540544324, 0.1876659044144927, 0.008934904322600948), (0.8736480485458845, 0.6447998138885855, 0.0206542255580609), (0.5374404573318584, 0.877334155022517, 0.17143207035443528), (0.6783232267692758, 0.15427438288206974, 0.38753477940504305), (0.1774432756724305, 0.5065309266462998, 0.7125438096022961)]]
sol_list = [[(0.0, 0.0, 0.0), (0.5688103787397405, 0.7186000283036396, 0.5858033289776865), (0.6825771895181517, 0.6121476922013611, 0.7715297784838346), (0.9168424114359593, 0.8351559116766858, 0.7591679971448481), (0.9168424114359593, 0.8351559116766858, 0.7591679971448481)], [(0.0, 0.0, 0.0), (0.6124004387248521, 0.7510313329320675, 0.03014121583415496), (0.5979441179363935, 0.8274351863904202, 0.8571605212728932), (0.8650798012820536, 0.8770555100467863, 0.4568197845990107), (0.8650798012820536, 0.8770555100467863, 0.4568197845990107)], [(0.0, 0.0, 0.0), (0.6401474839427221, 0.3252963131902817, 0.7021928827874642), (0.5020614884395128, 0.9819832181680271, 0.42422368545982214), (0.6096331583810265, 0.9251957278327811, 0.8580149310797234), (0.7860155311625523, 0.9976611702035936, 0.7899606168064774), (0.7860155311625523, 0.9976611702035936, 0.7899606168064774)], [(0.0, 0.0, 0.0), (0.39471170634497776, 0.8229439945827125, 0.2462831917747166), (0.5671891861072161, 0.5424998886510677, 0.3882054923443921), (0.6013500066662211, 0.9030793129560765, 0.5791494654172773), (0.6013500066662211, 0.9030793129560765, 0.5791494654172773)], [(0.0, 0.0, 0.0), (0.5159323069532216, 0.984389059653721, 0.013193917866874235), (0.4248073020390978, 0.6781206366254698, 0.2345076074771542), (0.6900763440727908, 0.7991438843826596, 0.4116818857448717), (0.7685923946246548, 0.7639975244904601, 0.8468565887646216), (0.9227510497281837, 0.6171800760490485, 0.7531712561984597), (0.9227510497281837, 0.6171800760490485, 0.7531712561984597)], [(0.0, 0.0, 0.0), (0.05178163754068795, 0.2984110806299152, 0.4928906612380542), (0.5621639748406846, 0.38538600601262635, 0.03318624964513349), (0.9320312018651725, 0.5173831020052744, 0.28206310623072234), (0.8936912475358182, 0.7300023911149468, 0.6464637644739037), (0.8979238802027347, 0.9210324293409348, 0.7368160598580122), (0.8979238802027347, 0.9210324293409348, 0.7368160598580122)], [(0.0, 0.0, 0.0), (0.3388970302163117, 0.2202142511505085, 0.9460112521821495), (0.489824190941507, 0.39558844298180107, 0.7322092126820974), (0.666481052671573, 0.4506787785191988, 0.4115881865402551), (0.6565036272054433, 0.4716940396726971, 0.6034322945666307), (0.9357229924365839, 0.8275865281787697, 0.4043521965167618), (0.9357229924365839, 0.8275865281787697, 0.4043521965167618)], [(0.0, 0.0, 0.0), (0.010428357210266009, 0.6261961470006031, 0.7507877431725736), (0.7718393361527897, 0.14925403102413717, 0.9327181992133581), (0.4878480673004869, 0.9594430365981889, 0.6606796077502329), (0.9728727606957626, 0.7613214734836637, 0.60946174938419), (0.9728727606957626, 0.7613214734836637, 0.60946174938419)], [(0.0, 0.0, 0.0), (0.7891495356203764, 0.09693892117666444, 0.15543111910337415), (0.8161983314830003, 0.19166508686410685, 0.2583327276476676), (0.6528062812946054, 0.6557328836974782, 0.4265781828966602), (0.8178417294079159, 0.3701502345482001, 0.7687569241741301), (0.8178417294079159, 0.3701502345482001, 0.7687569241741301)], [(0.0, 0.0, 0.0), (0.833035235589214, 0.6897583618922484, 0.7298590973510157), (0.8423658495797071, 0.9251843954991443, 0.7343396986235533), (0.8423658495797071, 0.9251843954991443, 0.7343396986235533)], [(0.0, 0.0, 0.0), (0.48921509290969456, 0.15808438506944855, 0.2667875749738458), (0.4401481865325065, 0.5005977738472487, 0.2556980816147293), (0.49946726902602057, 0.688828470482566, 0.5282259238583483), (0.7591678544196566, 0.7418837601579312, 0.6635468639474706), (0.7344508012211339, 0.8507945276715937, 0.9305276273632764), (0.7344508012211339, 0.8507945276715937, 0.9305276273632764)], [(0.0, 0.0, 0.0), (0.5072918747357815, 0.841720290034502, 0.26043620942410356), (0.5459054649221564, 0.29326829360793466, 0.24592263976854953), (0.685376386288155, 0.39861877353692077, 0.7896194244364371), (0.6225427031723975, 0.8009140299610138, 0.6896694433994695), (0.6997300261966525, 0.5180650096753431, 0.6724640705791598), (0.6997300261966525, 0.5180650096753431, 0.6724640705791598)], [(0.0, 0.0, 0.0), (0.5532767179146311, 0.2658135144247699, 0.8944652730246953), (0.6857287321778891, 0.7129042924577587, 0.5820235379647687), (0.8768321036782762, 0.4691921555418448, 0.6453661735253792), (0.9867284824698057, 0.9218199583093057, 0.49794170506575025), (0.9867284824698057, 0.9218199583093057, 0.49794170506575025)], [(0.0, 0.0, 0.0), (0.2411866891586295, 0.892866026776874, 0.4395456852916402), (0.9125823066144064, 0.19369111077109144, 0.09472985861446025), (0.70576985757801, 0.4823104083353107, 0.04058675315278691), (0.5565258175501065, 0.5944475505140355, 0.6412820828581866), (0.7394173335746875, 0.9243686553716381, 0.9322889002310325), (0.9412560059645328, 0.6383870774378331, 0.4448816854356301), (0.85437009127554, 0.7194205866287189, 0.6181855929509279), (0.8573349512474775, 0.6013688738655126, 0.8819226875062844)], [(0.0, 0.0, 0.0), (0.7150685516498655, 0.42039822657658515, 0.6218293137709837), (0.7000215921095785, 0.7668248527915147, 0.9148819440266688), (0.7084063511221952, 0.7865361859089525, 0.6042296790237942), (0.874351531701423, 0.8552869213511423, 0.712525355677417), (0.874351531701423, 0.8552869213511423, 0.712525355677417)], [(0.0, 0.0, 0.0), (0.49214503340566695, 0.4701567573455641, 0.3287800511778916), (0.9786219297799659, 0.9221508793550038, 0.8042618970588024), (0.9786219297799659, 0.9221508793550038, 0.8042618970588024)], [(0.0, 0.0, 0.0), (0.8618811113460156, 0.06420803474152258, 0.7390026053675781), (0.5631941615474377, 0.8939005134001624, 0.40470075820986134), (0.5812240380082745, 0.8923894804010662, 0.4442699799333131), (0.8553656323151784, 0.4873701237079189, 0.8935417919086044), (0.8553656323151784, 0.4873701237079189, 0.8935417919086044)], [(0.0, 0.0, 0.0), (0.554755591878007, 0.7357372418123639, 0.8076820569107933), (0.8364165057369121, 0.43107167111311756, 0.788267026645956), (0.8497159841332875, 0.7266229449625995, 0.8757744199040066), (0.850540376247931, 0.78938630670131, 0.7052915312118453), (0.850540376247931, 0.78938630670131, 0.7052915312118453)], [(0.0, 0.0, 0.0), (0.894812250305188, 0.7822064856763346, 0.6623020308927686), (0.894812250305188, 0.7822064856763346, 0.6623020308927686)], [(0.0, 0.0, 0.0), (0.20316224341693956, 0.5678402970337267, 0.060105069657288145), (0.6399855644248886, 0.08957801657547883, 0.08839829321644387), (0.7176641219468176, 0.4793868127075157, 0.279452112299865), (0.5903830674476173, 0.7196545816697537, 0.7081595627351639), (0.9883099080921294, 0.7124521718802983, 0.6092143963828205), (0.9883099080921294, 0.7124521718802983, 0.6092143963828205)]]
# sol_list =  [[(0.0, 0.0, 0.0), (0.5688103787397405, 0.7186000283036396, 0.5858033289776865), (0.2753594071312707, 0.5229420395968353, 0.7822083876699547), (0.6537216133377738, 0.4079744473236346, 0.06275242009491273), (0.6537216133377738, 0.4079744473236346, 0.06275242009491273)]]

sol_list2 = []
for sols in sol_list:
    for i in sols:
        if i not in sol_list2:
            sol_list2.append(i)

add_points = []
for i in range(len(sol_list2)):
    for j in range(i + 1,len(sol_list2)):
        add_points.append((np.asarray(sol_list2[i]) + np.asarray(sol_list2[j]))/2)

# add_points = [(np.array([0.0, 0.0, 0.0]) + np.array([0.05178163754068795, 0.2984110806299152, 0.4928906612380542]))/2, 
#                 (np.array([0.48921509290969456, 0.15808438506944855, 0.2667875749738458]) + np.array([0.05178163754068795, 0.2984110806299152, 0.4928906612380542]))/2,
#                  (np.array([0.48921509290969456, 0.15808438506944855, 0.2667875749738458]) + np.array([0.4401481865325065, 0.5005977738472487, 0.2556980816147293]))/2,
#                  (np.array([0.0, 0.0, 0.0]) + np.array([0.4401481865325065, 0.5005977738472487, 0.2556980816147293]))/2,
#                  (np.array([0.0, 0.0, 0.0]) + np.array([0.48921509290969456, 0.15808438506944855, 0.2667875749738458]))/2,
#                  (np.array([0.4401481865325065, 0.5005977738472487, 0.2556980816147293]) + np.array([0.05178163754068795, 0.2984110806299152, 0.4928906612380542]))/2]
for i in add_points:
    sol_list2.append(tuple(i))
    print('sol',tuple(i))
    print(np.sum(np.dot(myproblem.model.factors["group_size"][g],tuple(i)[g]) for g in range(myproblem.dim)))

max_test = []
cases = []
fea_sol= []
for sol in sol_list2:
    num_test = np.sum(np.dot(myproblem.model.factors["group_size"][g],sol[g]) for g in range(myproblem.dim))
    if num_test <= 7000:
        fea_sol.append(sol)
        max_test.append(num_test)
        mysolution = Solution(sol, myproblem)
        rng_list = [MRG32k3a(s_ss_sss_index=[0, ss, 0]) for ss in range(myproblem.model.n_rngs)]
        mysolution.attach_rngs(rng_list, copy=False)
        # Simulate a fixed number of replications (n_reps) at the solution x.
        n_reps = 10
        myproblem.simulate(mysolution, m=n_reps)
        cases.append(mysolution.objectives_mean[0])
print('feasible solutions: ', fea_sol)
print("expected total cases:", cases)
print("expected max tests", max_test)


plt.scatter(x = max_test, y= cases)
plt.xlabel('Expected max number of tests per day')
plt.ylabel('Expected total number of cases over 200 days')

plt.savefig('frontier.png', dpi = 600, bbox_inches = 'tight')
